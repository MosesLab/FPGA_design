;********************************************************************************
; Project:		FreeForm/PCI-104
; Module:		emacICMP.psm
; Parent:		N/A
; Description:	
;********************************************************************************
; Date			Author	Modifications
;--------------------------------------------------------------------------------
; 2008-03-17	MF		Created
; 2008-03-19	MF		Simulation corrections
; 2008-03-20	MF		Fix accumulation error with counting of FF DMAC
;********************************************************************************

;**************************************************************************************
; Constants
;**************************************************************************************	
;[
				;-------------------------
				;Port definitions
				;-------------------------
						;
						;Input Ports
                        CONSTANT IP_fifoStatus, 00 
						CONSTANT IP_txfrStatus, 01
						CONSTANT IP_ramDRd, 02
						CONSTANT IP_txfrSzLo, 03
						CONSTANT IP_txfrSzHi, 04 
						CONSTANT IP_5, 05
						CONSTANT IP_6, 06
						CONSTANT IP_7, 07						
						;
						;Output Ports
						CONSTANT OP_txfrCtrl, 01
						CONSTANT OP_ramAddrB, 02
						CONSTANT OP_ramDWr, 04
						CONSTANT OP_3, 08
						CONSTANT OP_4, 10						
						CONSTANT OP_5, 20
						CONSTANT OP_6, 40
                        CONSTANT OP_7, 80
						;		
						; Control bits
						CONSTANT c_txfrCtrlNone, 00 ;
						CONSTANT c_txfrCtrlStart, 01 ;
						CONSTANT c_txfrCtrlSkip, 02 ;
						CONSTANT c_txfrCtrlDone, 04 ;
						;
						; Status bits
						CONSTANT c_idle, 01
						CONSTANT c_rdTransfer, 02
						CONSTANT c_rdEof, 04
						CONSTANT c_rdError, 08
						CONSTANT c_wrWait, 10
						CONSTANT c_wrTransfer, 20
						CONSTANT c_wrEof, 40
						CONSTANT c_dpAccess, 80
						;
				;---------------------------------
				;Special Register usage
				;---------------------------------  
						NAMEREG sB, sMaxAddr
						NAMEREG sC, sDi
						NAMEREG sD, sDo
                        NAMEREG sF, sStatus
						NAMEREG sE, sCtrl
                        ;
				;---------------------------------
				;Delay Constants
				;---------------------------------  
                        ;
                        ;Constant to define a software delay of 1us. This must be adjusted to reflect the
                        ;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                        ;calculation highly predictable. The '6' in the following equation even allows for
                        ;'CALL delay_1us' instruction in the initiating code.
                        ;
                        ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                        ;
                        ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                        ;For clock rates below 10MHz the value of 1 must be used and the operation will
                        ;become lower than intended.
                        ;
                        CONSTANT delay_1us_constant, 0F
						;
				;---------------------------------						
				;Scratch Pad Memory Constants
				;---------------------------------
                        ;
                        CONSTANT ISR_preserve_s0, 3F           ;preserve register during ISR
                        ;
						;
				;---------------------------------						
				;Duap port memory locations
				;---------------------------------						
						CONSTANT dp_E_DMAC0, 00
						CONSTANT dp_E_SMAC0, 06
						CONSTANT dp_E_TYPE0, 0C
						CONSTANT dp_E_TYPE1, 0D
						CONSTANT dp_IP_VER, 0E
						CONSTANT dp_IP_TOS, 0F
						CONSTANT dp_IP_LEN0, 10
						CONSTANT dp_IP_LEN1, 11
						CONSTANT dp_IP_ID0, 12
						CONSTANT dp_IP_ID1, 13
						CONSTANT dp_IP_FLAGS, 14
						CONSTANT dp_IP_OFFSET1, 15
						CONSTANT dp_IP_TTL, 16
						CONSTANT dp_IP_PROT, 17
						CONSTANT dp_IP_CHK0, 18
						CONSTANT dp_IP_CHK1, 19
						CONSTANT dp_IP_SIP0, 1A
						CONSTANT dp_IP_SIP1, 1B
						CONSTANT dp_IP_SIP2, 1C
						CONSTANT dp_IP_SIP3, 1D
						CONSTANT dp_IP_DIP0, 1E
						CONSTANT dp_IP_DIP1, 1F
						CONSTANT dp_IP_DIP2, 20
						CONSTANT dp_IP_DIP3, 21
						CONSTANT dp_ICMP_TYPE, 22
						CONSTANT dp_ICMP_CODE, 23
						CONSTANT dp_ICMP_CHK0, 24
						CONSTANT dp_ICMP_CHK1, 25
						CONSTANT dp_ICMP_ID0, 26
						CONSTANT dp_ICMP_ID1, 27
						CONSTANT dp_ICMP_SEQ0, 28
						CONSTANT dp_ICMP_SEQ1, 29
						CONSTANT dp_ICMP_DATA0, 2A
						;
				;---------------------------------						
				;Scratch pad memory locations
				;---------------------------------												
						CONSTANT sc_E_DMAC0, 00
						CONSTANT sc_E_SMAC0, 06
						CONSTANT sc_IP_ID0, 0C
						CONSTANT sc_IP_ID1, 0D
						CONSTANT sc_IP_SIP0, 0E
						CONSTANT sc_IP_DIP0, 12

;]
;**************************************************************************************
;Main loop
;**************************************************************************************						
						;
l_cold_start: 			;CALL delay_40us         			; is this delay really necessary?    
                        ENABLE INTERRUPT                       ;Interrupt is used for XON/XOFF flow control
						;
						; wait until we are granted access to start of dp ram
l_wait_access:			INPUT sStatus, IP_txfrStatus
						AND sStatus, c_dpAccess
						COMPARE sStatus, c_dpAccess
						JUMP NZ, l_wait_access
						;
						; clear txfr trl register
						LOAD sCtrl, c_txfrCtrlNone
						OUTPUT sCtrl, OP_txfrCtrl
                        ;
	;----------------------------------------------------------------------------------
	;Check Frame type  = 0x0800  (Internet Protocol, Version 4 (IPv4))
	;Check IP type = 0x01
	;Check the ICMP = 0x08
	;----------------------------------------------------------------------------------
;[
						;
l_chk_frm_typ:			LOAD sDo, dp_E_TYPE0
						OUTPUT sDo, OP_ramAddrB
						LOAD sDo, sDo ; NOP ram delay
						INPUT sDi, IP_ramDRd
						COMPARE sDi, 08
						JUMP NZ, l_read_error
						;
						LOAD sDo, dp_E_TYPE1
						OUTPUT sDo, OP_ramAddrB
						LOAD sDo, sDo ; NOP ram delay
						INPUT sDi, IP_ramDRd
						COMPARE sDi, 00
						JUMP NZ, l_read_error
						;
l_chk_ip_prot:			LOAD sDo, dp_IP_PROT
						OUTPUT sDo, OP_ramAddrB
						LOAD sDo, sDo ; NOP ram delay
						INPUT sDi, IP_ramDRd 
						COMPARE sDi, 01
						JUMP NZ, l_read_error
						;
l_chk_icmp_type:		LOAD sDo, dp_ICMP_TYPE
						OUTPUT sDo, OP_ramAddrB
						LOAD sDo, sDo ; NOP ram delay
						INPUT sDi, IP_ramDRd 
						COMPARE sDi, 08
						JUMP NZ, l_read_error
						;							
;]
	;----------------------------------------------------------------------------------
	;MAC read and swap
	;----------------------------------------------------------------------------------
;[
						;
						; Read in destination mac
						; uses s1,s2,s3,s4
						LOAD S2, 00
						LOAD S3, 00; loop count
						LOAD S4, dp_E_DMAC0
						LOAD S5, sc_E_DMAC0
l_str_dmac:				OUTPUT S4, OP_ramAddrB
						LOAD sDo, sDo ; NOP ram delay
						INPUT s1, IP_ramDRd
						STORE s1, (S5)
						COMPARE S1, FF		; If sX<kk, CARRY = 1
						ADDCY S2, 00		; count the number of mac octets < FF
						ADD S4, 01
						ADD S5, 01
						ADD S3, 01
						COMPARE S3, 06
						JUMP NZ, l_str_dmac;
						;
						COMPARE S2, 00		; if this counter is zero; then all octets were FF
						JUMP Z, l_read_error;
						;
						; Read in soure mac
						; uses s1,s3,s4,s5
						LOAD S3, 00 ; loop count
						LOAD S4, dp_E_SMAC0
						LOAD S5, sc_E_SMAC0
l_str_smac:				OUTPUT S4, OP_ramAddrB
						LOAD sDo, sDo ; NOP ram delay
						INPUT s1, IP_ramDRd
						STORE s1, (S5)
						ADD S4, 01
						ADD S5, 01
						ADD S3, 01
						COMPARE S3, 06
						JUMP NZ, l_str_smac;
						;
						; Swap soure mac
						; uses s1,s2,s3,s4		
						LOAD S3, 00
						LOAD S4, dp_E_SMAC0
						LOAD S5, sc_E_DMAC0
l_swap_smac:			FETCH S1, (S5)
						OUTPUT s4, OP_ramAddrB
						OUTPUT s1, OP_ramDWr
						ADD S4, 01
						ADD S5, 01
						ADD S3, 01
						COMPARE S3, 06
						JUMP NZ, l_swap_smac;						
						;
						; Swap soure mac
						; uses s1,s2,s3,s4		
						LOAD S3, 00
						LOAD S4, dp_E_DMAC0
						LOAD S5, sc_E_SMAC0
l_swap_dmac:			FETCH S1, (S5)
						OUTPUT s4, OP_ramAddrB
						OUTPUT s1, OP_ramDWr
						ADD S4, 01
						ADD S5, 01
						ADD S3, 01
						COMPARE S3, 06
						JUMP NZ, l_swap_dmac
						;
;]
	;----------------------------------------------------------------------------------
	;----------------------------------------------------------------------------------	
;[				
;]
	;----------------------------------------------------------------------------------
	;Output ID field, and increment the id
	;----------------------------------------------------------------------------------	
;[
						;
l_ip_id:				FETCH S1, sc_IP_ID0
						FETCH S2, sc_IP_ID1
						LOAD sDo, dp_IP_ID0
						OUTPUT sDo, OP_ramAddrB
						OUTPUT s1, OP_ramDWr
						LOAD sDo, dp_IP_ID1
						OUTPUT sDo, OP_ramAddrB
						OUTPUT s2, OP_ramDWr
						ADD s2, 01
						ADDCY s1, 00
						STORE S1, sc_IP_ID0
						STORE S2, sc_IP_ID1						
						;
;]
	;----------------------------------------------------------------------------------
	;Store and swap ip addresses
	;----------------------------------------------------------------------------------	
;[
						;
						; Read in destination ip
						; uses s1,s3,s4,s5
						LOAD S3, 00 ; loop count
						LOAD S4, dp_IP_DIP0
						LOAD S5, sc_IP_DIP0
l_str_dip:				OUTPUT s4, OP_ramAddrB
						LOAD sDo, sDo ; NOP ram delay
						INPUT s1, IP_ramDRd
						STORE s1, (S5)
						COMPARE S1, FF
						ADDCY S2, 01
						ADD S4, 01
						ADD S5, 01
						ADD S3, 01
						COMPARE S3, 04
						JUMP NZ, l_str_dip;
						;
						; Read in soure ip
						; uses s1,s3,s4,s5
						LOAD S3, 00 ; loop count
						LOAD S4, dp_IP_SIP0
						LOAD S5, sc_IP_SIP0
l_str_sip:				OUTPUT s4, OP_ramAddrB
						LOAD sDo, sDo ; NOP ram delay
						INPUT s1, IP_ramDRd
						STORE s1, (S5)
						ADD S4, 01
						ADD S5, 01
						ADD S3, 01
						COMPARE S3, 04
						JUMP NZ, l_str_sip;
						;
						; Swap soure ip
						; uses s1,s2,s3,s4		
						LOAD S3, 00
						LOAD S4, dp_IP_SIP0
						LOAD S5, sc_IP_DIP0
l_swap_sip:				FETCH S1, (S5)
						OUTPUT s4, OP_ramAddrB
						OUTPUT s1, OP_ramDWr
						ADD S4, 01
						ADD S5, 01
						ADD S3, 01
						COMPARE S3, 04
						JUMP NZ, l_swap_sip;						
						;
						; Swap soure mac
						; uses s1,s2,s3,s4		
						LOAD S3, 00
						LOAD S4, dp_IP_DIP0
						LOAD S5, sc_IP_SIP0
l_swap_dip:				FETCH S1, (S5)
						OUTPUT s4, OP_ramAddrB
						OUTPUT s1, OP_ramDWr
						ADD S4, 01
						ADD S5, 01
						ADD S3, 01
						COMPARE S3, 04
						JUMP NZ, l_swap_dip
						;
;]
	;----------------------------------------------------------------------------------
	;Calculate IP header checksum
	;----------------------------------------------------------------------------------	
;[
						; s1, s2 current word
						; s4 dp address ptr
						; s6, s7 to store checksum
						;LOAD S3, 00
						LOAD S4, dp_IP_VER 			; first byte of header
						LOAD S6, 00 ; CS0
						LOAD S7, 00 ; CS1
						LOAD S8, 00 ; Carry
						;
						; load 16 bit word
l_ip_cs:				COMPARE s4, dp_IP_CHK0
						JUMP Z, l_ip_cs_skip
						;
						OUTPUT s4, OP_ramAddrB
						LOAD sDo, sDo 				; NOP ram delay
						INPUT s1, IP_ramDRd			; Get LSB
						ADD s4,01					; increment to next byte
						;
						OUTPUT s4, OP_ramAddrB	
						LOAD sDo, sDo 				; NOP ram delay						
						INPUT s2, IP_ramDRd			; Get MSB
						ADD s4,01					; increment to next byte
						;
						JUMP l_ip_cs_add
						;
l_ip_cs_skip:			LOAD S1, 00
						LOAD S2, 00
						ADD s4,02
						;
						; add 16 bit word to cs
						; Treat CS0 as MSW
l_ip_cs_add:			ADD S7, S2					; LSB
						ADDCY S6, S1				; MSB
						ADDCY S8, 00				; Carry
						;
						;ADD S3, 01
						COMPARE S4, dp_ICMP_TYPE	; Stop when ptr is past IP header
						JUMP NZ, l_ip_cs
						;
						; make 16 bit ones sum
						ADD S7, S8
						ADDCY S6, 00
						ADDCY S8, 00 				; there should be nothing in this.
						;
						; take ones complement
						XOR S6, FF
						XOR S7, FF
						;
						; store the checksum
						LOAD sDo, dp_IP_CHK0
						OUTPUT sDo, OP_ramAddrB
						OUTPUT s6, OP_ramDWr
						LOAD sDo, dp_IP_CHK1
						OUTPUT sDo, OP_ramAddrB
						OUTPUT s7, OP_ramDWr
						;
;]
	;----------------------------------------------------------------------------------
	;Change ICMP type to 0x0 = reply
	;----------------------------------------------------------------------------------
;[
						;
						LOAD sDo, dp_ICMP_TYPE
						OUTPUT sDo, OP_ramAddrB
						LOAD sDo, 00
						OUTPUT sDo, OP_ramDWr
						;
;]
	;----------------------------------------------------------------------------------
	;Before calculating ICMP checksum, wait for read to complete / or read error
	;----------------------------------------------------------------------------------
						; wait until read is done or read error
l_wait_read_done:		INPUT sStatus, IP_txfrStatus
						LOAD s1, sStatus
						AND  s1, c_wrWait
						COMPARE s1, c_wrWait
						JUMP Z, i_icmp_cs_start
						;
						LOAD s1, sStatus
						AND s1, c_rdError
						COMPARE s1, c_rdError
						JUMP NZ, l_wait_read_done
						;
						; if state machine indicates error, roll back sequence #
l_ip_id_roll:			FETCH S1, sc_IP_ID0
						FETCH S2, sc_IP_ID1
						SUB s2, 01
						SUBCY s1, 00
						STORE S1, sc_IP_ID0
						STORE S2, sc_IP_ID1						
						;
						JUMP Z, l_read_error
						;
	;----------------------------------------------------------------------------------
	;Calculate ICMP checksum, same calc as IP header cs
	;----------------------------------------------------------------------------------
;[
						; First read in the last addr
						; Don't remove 4 bytes for FCS, not passed on by MAC!
i_icmp_cs_start:		INPUT sMaxAddr, IP_txfrSzLo
						;
						; use s6, s7 to store checksum
						;LOAD S3, 00
						LOAD S4, dp_ICMP_TYPE 			; first byte of header
						SUB S4, 01 						; start @ -1, odd number
						LOAD S6, 00 ; CS0
						LOAD S7, 00 ; CS1
						LOAD S8, 00 ; Carry
						;
						; load 16 bit word
l_icmp_cs:				ADD s4,01						; even addr
						COMPARE s4, dp_ICMP_CHK0
						JUMP Z, l_icmp_cs_skip
						;
						OUTPUT s4, OP_ramAddrB
						LOAD sDo, sDo 					; NOP ram delay						
						INPUT s1, IP_ramDRd
						;
						COMPARE s4, sMaxAddr			; even addr (max 0xFF)
						LOAD S2, 00						; force LSB to 0, in case we have an odd number
						JUMP Z, l_icmp_cs_add			; if the max addr is odd, there is a even byte count		
						;
						ADD s4,01						; odd addr
						OUTPUT s4, OP_ramAddrB
						LOAD sDo, sDo 					; NOP ram delay						
						INPUT s2, IP_ramDRd
						;
						JUMP l_icmp_cs_add
						;
l_icmp_cs_skip:			LOAD S1, 00						; MSB
						LOAD S2, 00						; LSB
						ADD s4,01						; now odd number
						;
						; add 16 bit word to cs
						; Treat CS0 as MSW
l_icmp_cs_add:			ADD S7, S2						; LSB
						ADDCY S6, S1					; MSB
						ADDCY S8, 00					; Carry
						;
						;ADD S3, 01
						COMPARE s4, sMaxAddr			; odd addr (max 0xFF)
						JUMP NZ, l_icmp_cs
						;
						; make 16 bit ones sum
						ADD S7, S8
						ADDCY S6, 00
						ADDCY S8, 00 ; there should be nothing in this.
						;
						; take ones complement
						XOR S6, FF
						XOR S7, FF
						;
						; store the checksum
						LOAD sDo, dp_ICMP_CHK0
						OUTPUT sDo, OP_ramAddrB
						OUTPUT s6, OP_ramDWr
						LOAD sDo, dp_ICMP_CHK1
						OUTPUT sDo, OP_ramAddrB
						OUTPUT s7, OP_ramDWr
						;
						JUMP l_start_write						
;]
	;----------------------------------------------------------------------------------
	;Wait for receive to complete
	;----------------------------------------------------------------------------------
;[
						;
l_read_error:			LOAD sCtrl, c_txfrCtrlSkip
						OUTPUT sCtrl, OP_txfrCtrl
						;
						JUMP l_wait_txfr_complete						
						;
l_start_write:			; clear txfr trl register
						LOAD sCtrl, c_txfrCtrlStart
						OUTPUT sCtrl, OP_txfrCtrl
                        ;
						; wait for transfer to complete
l_wait_txfr_complete:	INPUT sStatus, IP_txfrStatus
						AND sStatus, c_wrEof
						COMPARE sStatus, c_wrEof
						JUMP NZ, l_wait_txfr_complete
						;
						; output done acknowledegment
						LOAD sCtrl, c_txfrCtrlDone
						OUTPUT sCtrl, OP_txfrCtrl
						JUMP l_wait_access
						;
;]
						;
; ~~~~~~~~~~~~~~~~~~~~~~~ DONE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;
;**************************************************************************************
;Software delay routines
;**************************************************************************************
;[
                        ;
                        ;Delay of 1us.
                        ;
                        ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
                        ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
                        ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
                        ;
                        ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                        ;
                        ;Registers used s0
                        ;
             delay_1us: LOAD s0, delay_1us_constant
              wait_1us: SUB s0, 01
                        JUMP NZ, wait_1us
                        RETURN
                        ;
                        ;Delay of 40us.
                        ;
                        ;Registers used s0, s1
                        ;
            delay_40us: LOAD s1, 28                            ;40 x 1us = 40us
             wait_40us: CALL delay_1us
                        SUB s1, 01
                        JUMP NZ, wait_40us
                        RETURN
                        ;
                        ;
                        ;Delay of 1ms.
                        ;
                        ;Registers used s0, s1, s2
                        ;
             delay_1ms: LOAD s2, 19                            ;25 x 40us = 1ms
              wait_1ms: CALL delay_40us
                        SUB s2, 01
                        JUMP NZ, wait_1ms
                        RETURN
                        ;
                        ;Delay of 20ms.
                        ;
                        ;Delay of 20ms used during initialisation.
                        ;
                        ;Registers used s0, s1, s2, s3
                        ;
            delay_20ms: LOAD s3, 14                            ;20 x 1ms = 20ms
             wait_20ms: CALL delay_1ms
                        SUB s3, 01
                        JUMP NZ, wait_20ms
                        RETURN
                        ;
                        ;Delay of approximately 1 second.
                        ;
                        ;Registers used s0, s1, s2, s3, s4
                        ;
              delay_1s: LOAD s4, 14                            ;50 x 20ms = 1000ms
               wait_1s: CALL delay_20ms
                        SUB s4, 01
                        JUMP NZ, wait_1s
                        RETURN
                        ;
;]